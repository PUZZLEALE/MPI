#include <omp.h>
#include <stdio.h>
#include <stdlib.h>
double omp_get_wtime(void);

int eulerTotient(int number)
{
        int sNumber = number;
        for(int i = 2; i*i <= number; ++i)
        {
                if(number % i == 0)
                {
                        while(number % i == 0)
                        {
                                number /= i;
                        }
                }
        }
        if(number > 1)
        {
                sNumber -= sNumber / number;
        }
        return sNumber;
}

int main (int argc, char *argv[])
{
        int nTheads = omp_get_num_threads();
        int nMaxThreads = omp_get_max_threads();
        printf("Parallel Execution: %f\n");
        double parallelTime, endTimeForParallel;
        double startTimeForParallel = omp_get_wtime();
#pragma omp parallel for
         for(int i = 2; i < 10000; i++)
         {
                 printf("O(%d) = %d\n", i, eulerTotient(i));
         }
         endTimeForParallel = omp_get_wtime();
         parallelTime = endTimeForParallel - startTimeForParallel;


        printf("Sequential Execution: \n");
        double sequentialTime,endTimeForSequential,startTimeForSequential = omp_get_wtime();
        for(int i = 2; i < 10000; i++)
        {
                printf("O(%d) = %d\n", i, eulerTotient(i));
        }
        endTimeForSequential = omp_get_wtime();
        sequentialTime = endTimeForSequential - startTimeForSequential;
        printf("Parallel Execution Time: %f seconds\n", parallelTime);
        printf("Sequential Execution Time: %f seconds\n", sequentialTime);
        double speedUp = sequentialTime/parallelTime;
        printf("SpeedUp: %f\n\n",speedUp);
        return 0;
}